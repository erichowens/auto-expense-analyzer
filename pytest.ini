[pytest]
# pytest configuration for Travel Expense System

# Minimum Python version
minversion = 7.0

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Add parent directory to Python path for imports
pythonpath = .

# Coverage settings
addopts = 
    --verbose
    --strict-markers
    --tb=short
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=5
    --disable-warnings
    -p no:warnings

# Coverage exclusions
[coverage:run]
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    setup.py
    */migrations/*
    */config.py
    */settings.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test markers
markers =
    unit: Unit tests that run in isolation
    integration: Integration tests that may require external services
    e2e: End-to-end tests that test complete workflows
    security: Security-focused tests
    performance: Performance and load tests
    slow: Tests that take > 5 seconds to run
    requires_api: Tests that require external API access
    requires_db: Tests that require database access
    smoke: Quick smoke tests for CI/CD
    regression: Regression tests for bug fixes

# Parallel execution settings
[pytest:parallel]
workers = auto
thread = false

# Timeout settings
timeout = 300
timeout_method = thread

# Output settings
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Ignore certain warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    ignore:.*unclosed.*:ResourceWarning

# HTML report settings
[html]
self_contained_html = true

# JSON report for CI/CD
json_report = test_report.json
json_report_summary = true
json_report_indent = 2

# JUnit XML for CI/CD integration
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true

# Benchmark settings (if using pytest-benchmark)
[benchmark]
disable_gc = true
min_rounds = 5
max_time = 1.0
min_time = 0.000005
skip = false
only = false

# Doctest settings
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Flake8 integration (if using pytest-flake8)
flake8-ignore = 
    E501  # line too long
    W503  # line break before binary operator
    E203  # whitespace before ':'

# Black integration (if using pytest-black)
black-line-length = 100

# Type checking (if using pytest-mypy)
[mypy]
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true