[tox]
# tox configuration for Travel Expense System
# Supports testing across multiple Python versions

envlist = 
    py38
    py39
    py310
    py311
    py312
    coverage
    security
    docs
    lint

skipsdist = False
isolated_build = True

[testenv]
# Base test environment configuration
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt

setenv =
    PYTHONPATH = {toxinidir}
    FLASK_ENV = testing
    DATABASE_URL = sqlite:///:memory:
    PLAID_ENV = sandbox
    TESTING = 1

commands =
    pytest {posargs:tests/}

[testenv:py38]
# Python 3.8 specific settings
basepython = python3.8
deps = {[testenv]deps}

[testenv:py39]
# Python 3.9 specific settings
basepython = python3.9
deps = {[testenv]deps}

[testenv:py310]
# Python 3.10 specific settings
basepython = python3.10
deps = {[testenv]deps}

[testenv:py311]
# Python 3.11 specific settings
basepython = python3.11
deps = {[testenv]deps}

[testenv:py312]
# Python 3.12 specific settings
basepython = python3.12
deps = {[testenv]deps}

[testenv:coverage]
# Coverage reporting environment
basepython = python3.11
deps =
    {[testenv]deps}
    pytest-cov>=4.1.0
    coverage[toml]>=7.0

commands =
    pytest --cov=. --cov-report=html --cov-report=term-missing --cov-report=xml --cov-fail-under=80 tests/
    coverage html -d htmlcov
    coverage report --fail-under=80

[testenv:security]
# Security testing environment
basepython = python3.11
deps =
    {[testenv]deps}
    bandit[toml]>=1.7.5
    safety>=2.3.5
    pip-audit>=2.6.0

commands =
    # Run security tests
    pytest -m security tests/
    # Scan for security vulnerabilities in code
    bandit -r . -f json -o bandit-report.json
    # Check for known security vulnerabilities in dependencies
    safety check --json --output safety-report.json
    # Audit pip packages for known vulnerabilities
    pip-audit

[testenv:lint]
# Code quality and linting environment
basepython = python3.11
deps =
    {[testenv]deps}
    flake8>=6.0.0
    black>=23.0.0
    isort>=5.12.0
    mypy>=1.5.0
    pylint>=2.17.0

commands =
    # Format checking with black
    black --check --diff .
    # Import sorting with isort
    isort --check-only --diff .
    # Linting with flake8
    flake8 .
    # Type checking with mypy
    mypy --ignore-missing-imports .
    # Additional linting with pylint
    pylint --exit-zero **/*.py

[testenv:docs]
# Documentation generation environment
basepython = python3.11
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0

commands =
    sphinx-build -b html docs/ docs/_build/html

[testenv:performance]
# Performance testing environment
basepython = python3.11
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    locust>=2.15.0
    memory-profiler>=0.61.0

commands =
    pytest -m performance tests/
    # Run load tests if locustfile exists
    - locust -f tests/locustfile.py --headless -u 10 -r 2 -t 30s

[testenv:integration]
# Integration testing environment
basepython = python3.11
deps = {[testenv]deps}

setenv =
    {[testenv]setenv}
    INTEGRATION_TESTS = 1

commands =
    pytest -m integration tests/

[testenv:e2e]
# End-to-end testing environment
basepython = python3.11
deps =
    {[testenv]deps}
    selenium>=4.15.0
    pytest-playwright>=0.4.0

commands =
    pytest -m e2e tests/

[testenv:smoke]
# Quick smoke tests for CI/CD
basepython = python3.11
deps = {[testenv]deps}

commands =
    pytest -m smoke --maxfail=1 tests/

[testenv:clean]
# Clean up test artifacts
basepython = python3.11
deps =
whitelist_externals =
    rm
    find

commands =
    rm -rf .tox/
    rm -rf .pytest_cache/
    rm -rf htmlcov/
    rm -rf .coverage
    rm -rf *.egg-info
    rm -rf dist/
    rm -rf build/
    find . -type f -name "*.pyc" -delete
    find . -type d -name "__pycache__" -delete

[flake8]
# Flake8 configuration
max-line-length = 100
exclude = 
    .git,
    __pycache__,
    .tox,
    venv,
    .venv,
    env,
    build,
    dist,
    *.egg,
    htmlcov,
    .pytest_cache,
    migrations

ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    W504   # line break after binary operator

[isort]
# isort configuration
profile = black
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[bandit]
# Bandit security linter configuration
exclude_dirs = 
    /tests/,
    /test/,
    /venv/,
    /.venv/,
    /env/

skips = 
    B101  # assert_used (needed for tests)
    B601  # shell_true (carefully reviewed)

[coverage:paths]
# Coverage path configuration
source = 
    .
    */site-packages/

[coverage:run]
# Coverage run configuration
branch = True
parallel = True
source = .

omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    */.tox/*
    setup.py
    */migrations/*
    */config.py
    */settings.py

[coverage:report]
# Coverage report configuration
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod